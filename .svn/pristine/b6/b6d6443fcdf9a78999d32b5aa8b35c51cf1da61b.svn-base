#region File Description
//-----------------------------------------------------------------------------
// GameplayScreen.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
#endregion

#region Using Statements
using System;
using System.Threading;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
#endregion

namespace GameStateManagement
{
    /// <summary>
    /// This screen implements the actual game logic. It is just a
    /// placeholder to get the idea across: you'll probably want to
    /// put some more interesting gameplay in here!
    /// </summary>
    class GameplayScreen : GameScreen
    {
        #region Fields

        WaterScreen waterScreen;
        FireScreen fireScreen;
        ForestScreen forestScreen;

        //Bucket player;

        ContentManager content;
        SpriteFont gameFont;
        Texture2D background;

        float pauseAlpha;
        int currentLevel;
        #endregion

        #region Initialization


        /// <summary>
        /// Constructor.
        /// </summary>
        public GameplayScreen(int pCurrentLevel)
        {
            TransitionOnTime = TimeSpan.FromSeconds(1.5);
            TransitionOffTime = TimeSpan.FromSeconds(0.5);
            waterScreen = new WaterScreen(GameScreenPosition.Center);
            fireScreen = new FireScreen(GameScreenPosition.Left);
            forestScreen = new ForestScreen(GameScreenPosition.Right);
            currentLevel = pCurrentLevel;
        }


        /// <summary>
        /// Load graphics content for the game.
        /// </summary>
        public override void LoadContent()
        {
            if (content == null)
                content = new ContentManager(ScreenManager.Game.Services, "Content");

            gameFont = content.Load<SpriteFont>("gamefont");
            background = content.Load<Texture2D>("Background/GameplayScreenBackground");
            Level.LoadContent(content, ScreenManager);
            Level.changeLevel(currentLevel);
            waterScreen.LoadContent(content, ScreenManager);
            fireScreen.LoadContent(content, ScreenManager);
            forestScreen.LoadContent(content, ScreenManager);

            // A real game would probably have more content than this sample, so
            // it would take longer to load. We simulate that by delaying for a
            // while, giving you a chance to admire the beautiful loading screen.
            //Thread.Sleep(1000);

            // once the load has finished, we use ResetElapsedTime to tell the game's
            // timing mechanism that we have just finished a very long frame, and that
            // it should not try to catch up.
            ScreenManager.Game.ResetElapsedTime();
        }


        /// <summary>
        /// Unload graphics content used by the game.
        /// </summary>
        public override void UnloadContent()
        {
            content.Unload();
        }


        #endregion

        #region Update and Draw


        /// <summary>
        /// Updates the state of the game. This method checks the GameScreen.IsActive
        /// property, so the game will stop updating when the pause menu is active,
        /// or if you tab away to a different application.
        /// </summary>
        public override void Update(GameTime gameTime, bool otherScreenHasFocus, bool coveredByOtherScreen)
        {
            base.Update(gameTime, otherScreenHasFocus, false);

            // Gradually fade in or out depending on whether we are covered by the pause screen.
            if (coveredByOtherScreen)
                pauseAlpha = Math.Min(pauseAlpha + 1f / 32, 1);
            else
            {
                pauseAlpha = Math.Max(pauseAlpha - 1f / 32, 0);
                waterScreen.Update(gameTime);
                fireScreen.Update(gameTime);
                if (fireScreen.lost)
                {
                    ScreenManager.AddScreen(new GameOverMenuScreen(this), ControllingPlayer);
                }
                forestScreen.Update(gameTime);
                if (forestScreen.won)
                {
                    ScreenManager.AddScreen(new VictoryScreen(++currentLevel), ControllingPlayer);
                    ExitScreen();
                }
            }

        }


        /// <summary>
        /// Lets the game respond to player input. Unlike the Update method,
        /// this will only be called when the gameplay screen is active.
        /// </summary>
        public override void HandleInput(InputState input)
        {
            if (input == null)
                throw new ArgumentNullException("input");

            // Look up inputs for the active player profile.
            int playerIndex = (int)ControllingPlayer.Value;

            KeyboardState keyboardState = input.CurrentKeyboardStates[playerIndex];
            GamePadState gamePadState = input.CurrentGamePadStates[playerIndex];

            // The game pauses either if the user presses the pause button, or if
            // they unplug the active gamepad. This requires us to keep track of
            // whether a gamepad was ever plugged in, because we don't want to pause
            // on PC if they are playing with a keyboard and have no gamepad at all!
            bool gamePadDisconnected = !gamePadState.IsConnected &&
                                       input.GamePadWasConnected[playerIndex];

            if (input.IsPauseGame(ControllingPlayer) || gamePadDisconnected)
            {
                ScreenManager.AddScreen(new PauseMenuScreen(), ControllingPlayer);
            }
            else if (input.IsNewKeyPress(Keys.A) || input.IsNewButtonPress(Buttons.X))
            {
                if ( !fireScreen.IsActive() )
                    ChangeScreenPositions( waterScreen, fireScreen, forestScreen );
                else
                    ChangeScreenPositions( fireScreen, waterScreen, forestScreen );

                //if (waterScreen.IsActive())
                //{
                //    ChangeScreenPositions(waterScreen, fireScreen, forestScreen);
                //}
                //else if (fireScreen.IsActive())
                //{
                //    ChangeScreenPositions(fireScreen, waterScreen, forestScreen);
                //}
                //else if (forestScreen.IsActive())
                //{
                //    ChangeScreenPositions(waterScreen, fireScreen, forestScreen);
                //}
            }
            else if (input.IsNewKeyPress(Keys.S) || input.IsNewButtonPress(Buttons.Y))
            {
                if ( !waterScreen.IsActive() )
                    ChangeScreenPositions( fireScreen, waterScreen, forestScreen );

                //if (waterScreen.IsActive())
                //{
                //    ChangeScreenPositions(fireScreen, forestScreen, waterScreen);
                //}
                //else if (fireScreen.IsActive())
                //{
                //    ChangeScreenPositions(fireScreen, waterScreen, forestScreen);
                //}
                //else if (forestScreen.IsActive())
                //{
                //    ChangeScreenPositions(fireScreen, waterScreen, forestScreen);
                //}
            }
            else if ( input.IsNewKeyPress( Keys.D ) || input.IsNewButtonPress( Buttons.B ) )
            {
                if ( !forestScreen.IsActive() )
                    ChangeScreenPositions( fireScreen, forestScreen, waterScreen );
                else
                    ChangeScreenPositions( fireScreen, waterScreen, forestScreen );
            }
            else
            {
                if ( waterScreen.IsActive() )
                    waterScreen.HandleInput( input );
                else if ( fireScreen.IsActive() )
                    fireScreen.HandleInput( input );
                else if ( forestScreen.IsActive() )
                    forestScreen.HandleInput( input );
            }
        }

        private void ChangeScreenPositions(MiniGameScreen toBeLeft, MiniGameScreen toBeCenter, MiniGameScreen toBeRight)
        {
            toBeLeft.ScreenPosition = GameScreenPosition.Left;
            toBeCenter.ScreenPosition = GameScreenPosition.Center;
            toBeRight.ScreenPosition = GameScreenPosition.Right;
        }


        /// <summary>
        /// Draws the gameplay screen.
        /// </summary>
        public override void Draw(GameTime gameTime)
        {
            // This game has a blue background. Why? Because!
            ScreenManager.GraphicsDevice.Clear(ClearOptions.Target, Color.Black, 0, 0);

            // Our player and enemy are both actually just text strings.
            SpriteBatch spriteBatch = ScreenManager.SpriteBatch;

            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, null, null, null, null, Resolution.getTransformationMatrix());
            spriteBatch.Draw(background, Resolution.GetVirtualResolution(), Color.White);
            spriteBatch.End();

            DrawTheScreens(gameTime, spriteBatch);



            // If the game is transitioning on or off, fade it out to black.
            if (TransitionPosition > 0 || pauseAlpha > 0)
            {
                float alpha = MathHelper.Lerp(1f - TransitionAlpha, 1f, pauseAlpha / 2);

                ScreenManager.FadeBackBufferToBlack(alpha);
            }
        }

        private void DrawTheScreens(GameTime gameTime, SpriteBatch spriteBatch)
        {
            //Draws inactive ones first so that the active one is on top of them
            if (!waterScreen.IsActive())
                waterScreen.Draw(gameTime, spriteBatch);
            if (!fireScreen.IsActive())
                fireScreen.Draw(gameTime, spriteBatch);
            if (!forestScreen.IsActive())
                forestScreen.Draw(gameTime, spriteBatch);

            //Draw the active one
            if (waterScreen.IsActive())
                waterScreen.Draw(gameTime, spriteBatch);
            else if (fireScreen.IsActive())
                fireScreen.Draw(gameTime, spriteBatch);
            else if (forestScreen.IsActive())
                forestScreen.Draw(gameTime, spriteBatch);

        }


        #endregion
    }
}
